#include"uart.h"

int main(int argc, char **argv)
{
     INT8  port_fd = 0;
     msg_que msg_buf;
     int err = 0;
     rev_pthread_param rev_param;
     pthread_t rev_pthid; //pthread;

     port_fd = Open_Port(DEV_PORT0);
     rev_param.port_id = port_fd;// Init port_id

     Serial_Init(port_fd, 115200, 8, 'N', 1);
     MSG_QUE_KEY = ftok("./uart.c",6);
     printf("Create Message Queue KEY is: %d!\n",MSG_QUE_KEY);
     MSG_QUE_ID = msgget(MSG_QUE_KEY,  IPC_EXCL);
     if(MSG_QUE_ID < 0 )
     {
         printf(" Message Queue is not exit!\n");
         MSG_QUE_ID = msgget(MSG_QUE_KEY,  IPC_CREAT | 0666);
         if(MSG_QUE_ID < 0)
         {
             printf("Create MSG QUE is failed\n");
         }
         else
         {
              printf("Create Message Queue is success. ID is: %d!\n",MSG_QUE_ID);
         }
     }
     else
     {

          printf("Create Message Queue is exit. ID is: %d!\n",MSG_QUE_ID);
     }

     err = pthread_create(&rev_pthid, NULL,(void *(*)(void *))Data_Rev, (void *)&rev_param);
     if(err != 0 )
        printf("Create Data_Rev pthread error!\n");
     else
        printf("Create Data_Rev pthread success!\n");
     while(1)
     {
         err = msgrcv(MSG_QUE_ID, (void *)&msg_buf,  sizeof(msg_buf) - sizeof(long),0, 0);
         if(err <= 0)
         {
            printf("Mssage queue rev data failed!\n");
         }
         else
         {
#ifdef RESULT
            printf("Mssage queue rev data success!\n");
            printf("REV MSG_TYPE is :%ld\n DATA is:%d\n", msg_buf.msg_type, msg_buf.data[0]);
#endif
         }
     }

}
